[
["index.html", "emLab Standard Operating Procedures Overview", " emLab Standard Operating Procedures 2019-04-29 Overview This reference describes standard operating procedures for emLab projects. "],
["1-project-management.html", "1 Project Management ", " 1 Project Management "],
["1-1-airtable.html", "1.1 Airtable", " 1.1 Airtable "],
["1-2-google-team-drive.html", "1.2 Google Team Drive", " 1.2 Google Team Drive "],
["1-3-github.html", "1.3 GitHub", " 1.3 GitHub "],
["2-data.html", "2 Data ", " 2 Data "],
["2-1-tidy-data.html", "2.1 Tidy Data", " 2.1 Tidy Data As researchers, we work with data from many different sources. Often these data are messy. One of the first steps of any analysis is to clean any available raw data so that you can make simple visualizations of the data, calculate simple summary statistics, look for missing or incorrect data, and eventually proceed with more involved analyses or modeling. As part of the data cleaning process, we recommend getting all data into a “tidy” format (also known as “long” format, as opposed to “wide” format). According to the Tidy Data Guide by Garrett Grolemund and Hadley Wickham, tidy data is defined as: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. These three features of tidy data can be seen in the following figure, also from the Tidy Data Guide: Once data are in this format, it makes subsequent visualization and analysis much easier. If you’ve ever worked with a file that has a separate column for each year (an example of “wide” format data), you know how hard that type of data format is to work with! As always, we recommend keeping a backup copy of the raw data you obtained from the original source, and using a reproducible script for transforming these data into a tidy data format. 2.1.1 Recommended Resources We highly recommend the chapter on Tidy Data from the book R for Data Science by Garrett Grolemund and Hadley Wickham. This guide is geared towards R users and provides helpful tips for transforming and working with data in R, but the concepts should be broadly applicable to other languages as well. For tips specific to Python, we recommend a blogpost by Jean-Nicholas Hould titled Tidy Data in Python. "],
["2-2-storage.html", "2.2 Storage", " 2.2 Storage "],
["2-3-data-directory.html", "2.3 Data Directory", " 2.3 Data Directory "],
["2-4-metadata.html", "2.4 Metadata", " 2.4 Metadata "],
["3-code.html", "3 Code ", " 3 Code "],
["3-1-style-guide.html", "3.1 Style Guide", " 3.1 Style Guide At emLab, we recommend using a consistent code style for each of the different programming languages we use. Recommended coding styles for a particular language are collated in what is known as a “style guide”. Style guides typically include standardized ways of naming script files, defining functions and variables, commenting code, etc. While emLab does not mandate the use of style guides, having a consistent code style allows all emLab staff to easily understand each other’s code, collaborate on projects, and jump in on new projects. We consider this an important aspect of collaboration, reproducibility, and transparency. Rather than re-invent the wheel, we leverage existing code style guidelines for each of the languages we use. Below is a summary of the code style guidelines we recommend for various languages: R - Tidyverse Style Guide, by Hadley Wickham Python - Google’s Python Style Guide Stata - Suggestions on Stata programming style, by Nicolas J. Cox Other languages - Google style guides for other languages "],
["3-2-github-workflow.html", "3.2 GitHub Workflow", " 3.2 GitHub Workflow "],
["4-high-performance-computing.html", "4 High Performance Computing ", " 4 High Performance Computing "],
["4-1-google-cloud-platform.html", "4.1 Google Cloud Platform", " 4.1 Google Cloud Platform "],
["4-2-ucsb-server-cluster.html", "4.2 UCSB Server Cluster", " 4.2 UCSB Server Cluster "]
]
