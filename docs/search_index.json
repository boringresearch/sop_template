[
["index.html", "emLab Standard Operating Procedures Overview", " emLab Standard Operating Procedures 2019-11-18 Overview This reference guide describes standard operating procedures (SOP) for emLab projects. This schema outlines the major platforms used for all emLab projects: insert image of the platforms This SOP is organized into 4 different sections: (1) Project Management, (2) Files, (3) Code, and (4) High Performance Computing. Section 1 provides an overview of the platforms we use and how to install them, Section 2 covers file structure and storage, Section 3 highlights best practices for coding, and Section 4 covers high performance computing. "],
["1-project-management.html", "1 Project Management", " 1 Project Management This section details the project management platforms we use at emLab to help set up projects for success. Please additionally review the project management best practices document. "],
["1-1-google-calendar.html", "1.1 Google Calendar", " 1.1 Google Calendar Our team relies heavily on Google Calendar to check team member’s availability and schedule meetings. Please keep your calendar up to date! 1.1.1 Setting out of office notifications The best way to let people know if you are on vacation or out of the office is by setting up your calendar event as “Out of Office” instead of a regular event. You can customize this to automatically decline meetings on that day. 1.1.2 Adding other calendars To view team member’s calendars, click on the plus symbol next to “Other calendars” on the left hand side of your calendar and select “Subscribe to calendar.” There is a full list of team emails in the emLab Team Roster document. 1.1.3 Scheduling rooms See this Room Scheduling document for full details on how to reserve rooms in both Bren and MSI. As a reminder, please add bren-sfg@ucsb.edu to any meeting invite you want hold in MSI 1304. "],
["1-2-slack.html", "1.2 Slack", " 1.2 Slack Our team uses Slack on a daily basis to keep communication channels open within teams and across our different offices. We have an emLab work space that houses all of our channels. When you are first added to Slack, you will be added to the General, Random, Communications, Report and Publications, and Code channels. We also have a channel for every project, which you will be added to as needed. We recommend downloading the desktop app, but you can also view Slack in a browser window. 1.2.1 Slack basics Slack is organized into Channels and Direct Messages. Channels are a way to organize conversations and other than a couple general emLab channels, are often project specific. Whatever you share in a channel is viewable by all members of that channel. You can also send direct messages to an individual or a group of up to 9 people. One great thing about Slack is that it’s searchable. You can search either by person or keywords to find old messages. Additionally, if someone sends you something you will need to reference multiple times, you can star messages and view them by clicking the star in the upper right-hand corner. People have differing notification preferences, which you can set under Preferences → Notifications. If someone sends you a direct message or tags you, a number will show up on your slack app. If they add something to a channel you are on but don’t tag you, a red dot will show up. To ensure someone gets a numbered notification (number is based on the number of messages), either tag them (i.e. @Erin) or tag the channel (i.e. @channel). Tagging the channel will send a notification to every member of that channel. 1.2.2 Creating a channel When a new project starts, create a slack channel for it and add the relevant team members to it. To create a channel, simply click on the plus symbol next to channels and fill out the channel information (Name, Purpose, and Send invites to). It’s that easy! "],
["1-3-airtable.html", "1.3 Airtable", " 1.3 Airtable At emLab, we use Airtable as our primary project management software. To put it simply, it’s a glorified spreadsheet that you can mold to fit your needs. Email Erin (eoreilly@ucsb.edu) to be added to Airtable. 1.3.1 Helpful terminology Base: think of it like a database. A base is made up of tabs of spreadsheets that can be customized and linked to one another Workspace: multiple bases can be organized within a workspace. For example, we have an emLab workspace and individual project bases. 1.3.2 Getting to know the emLab workspace Within the emLab workspace, we have the following bases: emLab projects and pipeline Project template Project specific The emLab Projects and Pipeline base contains overview information about current and potential projects. It is organized into the following tabs: Team Directory, Projects (current and archived), Deliverables (as outlined in the scope of work), and In the Pipeline (potential projects and their current stage). The Project Template provides the basic structure for a project specific base. To copy, click on the arrow in the bottom right hand corner and select “duplicate base.” Then rename the base and customize it to the needs of your team. Each emLab project has its own base. Teams can customize these as they see fit, but at a minimum, please include the deliverables in the project’s scope of work and the team. Within the team tab, it is often helpful to add everyone’s project role because these might differ from project to project (i.e. might be a project manager on one and a researcher on another). 1.3.3 Customizing your project base It is up to you and your team to determine how to make Airtable work for you. Outlined below are different ways to customize your base. Feel free to look at other bases that have been created for inspiration! 1.3.3.1 Tab ideas Deliverables (required): high level deliverables stated in the scope of work Tasks: more detailed steps of how to reach a deliverable; could be day-to-day tasks Note: you can link a tasks tab with the deliverables tab to see how they feed into one another Team (required): list of team members with their emails and project role Note: this can be linked to the deliverables and tasks tab so you know who is working on what Datasets: way to keep track of all the datasets going into an analysis and what stage of collection and processing they are in Example Analyses: tracking different versions of a model run to keep track of progress and outputs of different simulations run Example 1.3.3.2 Column options There are 25 column type options within Airtable. The ones we most commonly use are: Link to another record: links information from different tabs within the same base Example: create an “assigned to” column in your deliverables tab and link it with your team tab. When looking at the deliverables tab, you can see how tasks are distributed across the team, and when looking at the team tab, you can see what deliverables each person is working on. Single line text Attachment Checkbox Multiple select Single select Date 1.3.3.3 Ways to view your base Different views There are 5 different ways to view your base: grid, calendar, gallery, kanaban, and form, which can be explored here. Filtering This works like the normal filtering function in spreadsheets. You can sort A to Z, by date, exclude records with certain names, etc. Grouping Grouping allows you to bucket your spreadsheet by field type. Example 1: Clean seafood grouping tasks by complete v. not complete. Example 2: Clean seafood grouping deliverables by research track. Expanding a record Within each tab, you can expand records in the first column to view all its information at once by clicking the two opposing arrows before the text. This option combines information from all of the columns into an easy to read card format. "],
["1-4-google-shared-drive.html", "1.4 Google Shared Drive", " 1.4 Google Shared Drive We have all experienced the moment where we can’t remember where a Google Doc is. To help solve this problem, we created an emLab Shared Google Drive, which is a centralized space for all of our documents to live within a shared file structure. Unlike files in My Drive (your personal Google Drive account), files within the Shared Drive belong to the team instead of an individual. So even if people leave, the files stay exactly where they are and aren’t lost with that person’s account. The structure of Shared Drive is detailed in Section 2. You can read more about Shared Drives here. 1.4.1 Sharing files Note: for Shared Drive, you either add someone to the entire Drive or share individual files with them. You cannot share individual folders within a Shared Drive. Members of the Shared Drive can see all folders and files within the Drive. If you want to send a quick link to someone who is part of the Shared Drive, simply copy the URL from your browser. There is no need to create a shared link if you are sending it to someone with access to the emLab Shared Drive. If you want to share files with people outside of the emLab Shared Drive, that is still possible. Within a document, click on Share in the upper right hand corner. From there are two options: either add people’s emails or create a shared link. To create a shared link, click Who Has Access and turn link sharing on. From there you can select the level of editing capabilities and either keep the just UCSB access or expand to allow external access. 1.4.2 Linking the shared drive and your computer 1.4.2.1 Why install Drive File Stream? As explained above, using a shared drive means that individuals don’t “own” the files. All files are instead owned by the emLab Shared Drive, which lives “on the cloud”. You can access these files through a web browser, just as you would access them on Google Drive. However, it is nice to have the files directly in your computer. To do so, you’ll need to install Drive File Stream, Google’s new system that will partially replace Google Backup and Sync There are important distinctions between Backup and Sync and Drive File Stream. As the names indicate it, Backup and Sync syncs and stores Drive content locally on your computer (that is, it takes up space in your hard drive). Drive File Stream, however streams all files and folders from the cloud. You can think of these as owning a DVD vs. streming the movie from NetFlix. You can read more on the differences between these approaches here. 1.4.2.2 Step-by-step installation Go to Get started with Drive File Stream and select the appropriate installer for your operating system. Note: Make sure you are on your ucsb account Dowload Drive File Stream If you are on a Windows machine, execute the googledrivefilestream.exe file. If you are on MacOS, run the googledrivefilestream.dmg file and then run the GoogleDriveFileStream.pkg file Follow instruction on the helper (accept all defaults) Once the installation is complete, you’ll need to sign in to your account. To do so: Click on the Drive File Stram icon () On Windows machines, it should be on the bottom right corner of your screen On MacOS, it should be at the top right of your screen Sign in with your ucsb account After signing in, the application will launch a short 4-screen overview of the product The last screen should look like the screenshot below. Click on the button to open your GoogleDrive folder and access your files four-screen overview Once that finder / explorer opens, you should be able to see two folders: 1) My Drive and 2) Shared drives. The first folder will contain files owned by you (that is, your normal Google Drive Files stored on your ucsb account). The second folder will contain all shared drives you are part of. By navigating to that folder, you should see the emLab shared drive, containing all the folders mentioned earlier. A general structure of the GoogleDrive folder is shown below: Google Drive |__ My Drive | |__ Whatever files you have on your GoogleDrive |__ Shared drives |__ emLab |__Central emLab Resources |__Communications |__Data |__Projects 1.4.3 Other considerations 1.4.3.1 Actual location of the Google Drive folder on my computer Remember that File Stream will stream, not save files to your computer. Therefore, there will be no folder directly under your devices / hard drives. Instead, your computer will detect the Google Drive folder as if it were an external device connected to your machine. On a Mac, the folder will therefore appear on your desktop, or under the Devices tab of your Finder. On a Windows machine, it will appear under This PC, next to your hard drive and any other connected devices. Location of the Google Drive folder depending on your operating system. Left panel shows location of the folder on Mac, and right shows the location of the folder on Windows. 1.4.3.2 I also want to link a personal gmail account If you also want to sync files from your personal gmail account, you’ll need to use Backup and Sync. You can install it, and make sure to sign in using your gmail account, not your ucsb account. Everything else should stay the same. "],
["1-5-git-and-github.html", "1.5 Git and GitHub", " 1.5 Git and GitHub Since most of our projects at emLab involve code, we use Git to track changes made to our code and faciliate collaboration by merging changes made by others, and GitHub to organize, share, and backup our code. This section provides a brief overview of how Git and Github work, how to install them on your computer (and how to join the emLab GitHub page), and some general guidelines for how to use GitHub to organie code associated with emLab projects. 1.5.1 What are Git and GitHub? Git is an open-source version control system designed for programmers. Git can operate as a standalone program on your computer, but can also operated through many other programs (or “clients”). GitHub (really github.com) is a hosting service that provides online storage for your Git-projects. Think of Git as a little creature that keeps a record of all of the changes made to a file stored on your computer, and GitHub as a safe place on the internet that the little creature can go and put a copy of that file (and the changes you’ve made) when you tell it to do so. There are a number of good tutorials with more information on how Git and GitHub work (as well as how you can set them up to sync directly through other programs such as RStudio). The Ocean Health Index team at the National Center for Ecological Analysis and Synthesis (NCEAS) here in Santa Barbara created a very detailed data science training that includes two excellent tutorials on setting up and collaborating with GitHub: GitHub Collaborating with GitHub If you’re new to using Git and GitHub, the two tutorials listed above are a great place to start since NCEAS and emLab often operate in a similar way. Additionally, see the Software Carpentry’s lesson for the Git novice. If you primarily use (or will use) R for coding, Jenny Bryan also has an excellent tutorial specifically about how to integrate Git and GitHub with R: Happy Git and GitHub for the useR If you’re interested in learning more about all of the functionality GitHub has to offer, the Openscapes team at NCEAS has also tutorials on how to use GitHub for publishing code and for project management: GitHub for Publishing GitHub for Project Management 1.5.2 Helpful terminology Git and GitHub use some weird terms that might be unfamiliar. Before installing and setting up Git and GitHub, here are a few key terms you may come across: repository (“repo”): a collection of files pertaining to the same project, document, goal, etc. Generally there’s a single repository for each project at emLab containing all of the code associated with that project. This repository can be organized with multiple folders and subfolders. commit: a set of changes made by a user to one or more files in a repository that the user wants to prepare to send to GitHub. push: the action of sending a commit from your local machine to the remote GitHub directory. pull: the action of retrieving any commits that have been made to the repository and are stored in the remote GitHub directory but are NOT on your local machine. 1.5.3 How to install Git and GitHub Most of tutorials listed above include detailed instructions on how to install Git and GitHub. The short version (and steps specific to getting incorporated with the emLab GitHub page) are listed below. For more detailed instructions, please refer to the tutorials listed above. Create a free GitHub account Notes: use your @ucsb.edu email make sure you remember your username and password, you’ll need this later Landing page for GitHub Since GitHub is a company, and is used by many different types of organizations in many different industries, they offer a few different pricing schemes/deals. As an individual, once you create a username and sign up for an account, you get an unlimited number of free public and private repositories, but the number of external collaborators allowed in private repositories is limited to three. GitHub also offers a “Pro” plan for $7/month giving you unlimited external collaborators on all of your private repositories. However, for students, faculty, and research staff, or official nonprofit organizations and charities GitHub waives this fee through its GitHub Education and GitHub for Good programs. Good news! emLab qualifies as an edcuational organization through the GitHub Education program, and as a UCSB staff member you qualify for the individual educational discount. So, once you’ve signed up for a free account on GitHub… Go to the GitHub Education page and register as a researcher (Note: this is why you should use your @ucsb.edu email for step 1). Landing page for GitHub Education Click on the “Get benefits” link in the top right-hand corner and follow the directions to upgrade your account to a “Pro” account for free. You may need to take a picture of your UCSB ID card to submit as part of this process. GitHub may also periodically ask you to re-verify your eligability to qualify for this program. Send Darcy Bradley a Slack message (or an email if you must… darcybradley@ucsb.edu) with your new GitHub username so you can be added to the emLab GitHub page! emLab GitHub page The emLab GitHub page is where the repositories for all emLab projects live (more on this later), and once you are a member of the organization you will be able to create new public and private repositories that appear here (as well as on your personal page). Install Git If you’re very very lucky, Git will already be installed on your computer. Open the shell for your opperating system. If you’re using Mac OS X, this is called Terminal. If you’re using Windows, you have multiple types of shells, but you should be using a Git Bash shell (NOT Power Shell). The easiest way to find out whether Git is already installed on your machine is to type the following: git --version ## git version 2.20.1 (Apple Git-117) If it returns a version number, you already have Git installed! However, if it returns something like git: command not found, you need to install Git. There are a number of different ways to install Git. Stand-alone installers exist for Mac OS X and Windows. If you’re using Linux, you probably already know how to install Git. If you’re using Mac OS X, Git can also be installed as part of the XCode Command Line tools, or you can also install it using Homebrew. If you’re interested in either of those options, follow the cooresponding directions in Jenny Bryan’s tutorial. If that sentence doesn’t mean anything to you, download the installer from the link above and follow the prompts. Once you’ve installed Git via whichever method you’ve chosen for your operating system, open the shell again and retype the same command to verify that the installation was successful: git --version ## git version 2.20.1 (Apple Git-117) It should now return a version number. Tell Git who you are Git needs to know a little bit more about you in order to play nicely. In particular there are two things that it’s helpful to configure: 1) The name that will be associated with any commits you make, and 2) the email address asssociated with your GitHub account. To set these two things, type the following into the shell: git config --global user.name &#39;Jane Doe&#39; git config --global user.email &#39;jane@example.com&#39; using your name and email. The user name input here should be your full name (i.e. it does not need to be the same as your username for GitHub), but the email DOES need to be the same as that associated with your GitHub account. You can then check to make sure these were entered correctly by typing: git config --global --list Optional: Store your credentials (so you don’t have to type your password every time): Git will sometimes want to make sure you are you when performing certain operations. For example, when cloning a private repo or when you want to push changes to a repo. If you don’t want to do this every time, you can tell Git to rememberyour password too. You can read more about Git’s credential management here. On your terminal, navigate to a repository on your computer. (You can also use the Terminal pane within RStudio) and type the following into the shell: # Tell git to use the credential.helper git config --global credential.helper store # git pull (or git push) will prompt you to enter your password git pull What we just did was to tell Git to store our credentials. So, after typing them this one time, you should not need to type it again. Optional: Make a repository on GitHub and practice connecting to it [Do a practice example here]. Optional: Install a client for Git to make your life easier If you actually tried step 6 and you’re still reading this, you probably don’t usually spend a lot of time running commands in the shell and the last step didn’t make a lot of sense. If that’s the case, you might want to also install a Git client in order to help you visualize what Git is actually doing. You do not need a Git client to take advantage of version-control functionality of Git, as everything can be done using the shell (as in the previous step). However, the shell is not user-friendly. There are a number of Git/GitHub clients that you can download to interact with Git and GitHub in a more visual way. If you use RStudio, there is a very basic Git client built in that may be enough to get you started (more on this later). Other nice free Git clients include: GitKraken (available for all platforms, plus the logo octopus is pretty sweet…) GitFiend (cross-platform) SourceTree (has some problems on Mac OS X) GitHub Desktop (not available for Linux) GitUp (only for Mac OS X) There are many more. See Jenny Bryan’s tutorial if you’re not satisfied with those choices. Once you’ve installed a Git client, follow the directions to connect to your GitHub account. Once you’ve done this, try opening the local version of the repository you made in step 6, and notice the nice visual representation of the changes you made. 1.5.4 Some general guidelines for using GitHub at emLab The GitHub Projects feature provides project management tools for planning, creating and assigning tasks, and tracking progress. Project boards help organize and prioritize work. They can be specific to one repo or used to connect multiple repos under the same project. Within repos, Issues and Pull Requests should be used for discussion, creating and assigning tasks, code review, etc., which are connected to project boards. The GitHub Teams feature allows for subgroups within the emLab GitHub organization, which enables easier communication among teams and better access control for repos. "],
["2-file-structure.html", "2 File Structure", " 2 File Structure "],
["2-1-file-naming.html", "2.1 File Naming", " 2.1 File Naming add text about standardized file naming "],
["2-2-shared-drive-files.html", "2.2 Shared Drive Files", " 2.2 Shared Drive Files 2.2.1 General Structure Google Drive |__ My Drive | |__ Whatever files you have on your GoogleDrive |__ Shared drives |__ emLab |__ Central emLab Resources |__ Communications |__ Data |__ Projects The emLab Shared Drive is organized into four main folders: Central emLab Resources: includes meeting and event information, onboarding materials, information about travel reimbursements, and the team roster Communications: includes the blog schedule, Adobe design projects, PowerPoint templates, photo repository, and publication and media tracking Data: will include the emLab data directory and all datasets we work with Projects: includes information on past and current projects, and project management guidelines A full table of contents can be seen here. 2.2.2 Project Folder Structure Google Drive |__ Shared drives |__ emLab |__ Projects |__ Archived Projects |__ Current Projects |__ Project Example |__ Data |__ Deliverables |__ Grant Reporting |__ Meetings and Events |__ Presentations |__ Project Materials |__ Resources Each project folder must contain the following 6 folders: Data: all input/raw data will live in the emLab/Data folder. This data folder will contain all intermediate datasets as well as output datasets. Be sure to also add a copy of your final datasets to the emLab/Data folder and data directory. Deliverables: final reports, paper manuscripts, other final deliverables not related to data outputs Grant Reporting: grant reports for funders Meetings and Events: meeting notes, agendas, documentation for workshop/event planning Presentations: any presentations created for the project Project Materials: everything else that does not fit into one of these folders (i.e. drafts of methods, literature review, etc.) From here, each project can add sub-folders as they see fit within these 6 folders. 2.2.3 Data Storage As stated above, there are two folders where data will be stored. The two locations are emLab/Data and emLab/Projects/project_name/Data. This may seem confusing and redundant, but this section explains the differences between these two locations. As a short summary: emLab/Data contains only input and output data. On the other hand, project_name/Data may contain raw, cleaned, intermediate, and output files for a project. More detail is provided in the following subsections. 2.2.3.1 emLab/Data As a general rule, this folder will contain all data used and produced by emLab projects. The idea is to make it esasier for people to find data that is used across projects. At the same time, it makes it easier for future projects to use previous results as input for their work. For example, the RAM Legacy stock assessment database is key to many projects, and was used as input in the Costello et al. 2016 “upsides” paper. The “upsides database” is an output from the Costello paper, which can be used as input for other projects. Therefore, the emLab/Data folder contains both the RAM and upsides datasets. This large central data repository has the potential to become messy. Therefore, it is important to follow some key guidelines to store the data. All data in this folder should be a folder that includes at minimum the data and metadata files. For example, a file structure for the two datasets mentioned above might be: emLab |__ ... [other folders] |__ Data |__ upsides | |__ _readme_upsides.txt [the metadata] | |__ upsides.csv [the data] |__ RAM | |__ _readme_RAM.txt [the metadata] | |__ RAM v4.10 [the data] | |__ RAM v4.15 [the data] | |__ RAM v4.25 [the data] | |__ RAM v4.40 [the data] |__ ... [other folders] 2.2.3.2 Project-specific data For project-specific cases, however, the teams will often receive data from partners, compile it from multiple sources, use survey responses, or extract it from a literature review. These data are termed “raw data”, and should never be directly modified -all the errors, mistakes, and gremlins should be kept in the original versions. Instead, they should be processed / cleaned, and then exported as “clean data”, that can be used in analyses. For example, suppose that a team working in Montserrat receives a database of lobster landings by the government. These data are stored as an excel spreadsheet, and will surely contain many mistakes and errors that need to be fixed. The team will clean the data (preferabily, using a reproducible script), and then export it to a different location within the project folder. Therefore, the project-level data folders will be divided into raw_data and data folders. The first one will contain all raw data as-is. The second folder will contain clean data, whcich can then be used as input for analyses. 2.2.3.3 General structure of the Data folder Data |__shared | |__ upsides | |__ RAM | | |__ RAM v4.10 | | |__ RAM v4.15 | | |__ RAM v4.25 | | |__ RAM v4.40 | | |__ ... | |__ SST |__ montserrat_project |__ raw_data | |__ lobster_landings_nov_2012.xslx |__ data |__ lobster_landings_nov_2012.csv "],
["2-3-github-structure.html", "2.3 GitHub Structure", " 2.3 GitHub Structure "],
["3-data.html", "3 Data", " 3 Data Data should be managed and shared properly to make it useful in research, to promote transparency and facilitate reproducibility, and to ensure the credibility of research. This includes such practices as transforming data into a tidy format, storing data in open file formats, and providing data documentation. Recommended readings: Borer, Elizabeth T., Eric W. Seabloom, Matthew B. Jones, and Mark Schildhauer. 2009. “Some Simple Guidelines for Effective Data Management.” The Bulletin of the Ecological Society of America 90 (2): 205–14. https://doi.org/10.1890/0012-9623-90.2.205. Broman, Karl W., and Kara H. Woo. 2018. “Data Organization in Spreadsheets.” The American Statistician 72 (1): 2–10. https://doi.org/10.1080/00031305.2017.1375989. Ellis, Shannon E., and Jeffrey T. Leek. 2018. “How to Share Data for Collaboration.” The American Statistician 72 (1): 53–57. https://doi.org/10.1080/00031305.2017.1375987. Goodman, Alyssa, Alberto Pepe, Alexander W. Blocker, Christine L. Borgman, Kyle Cranmer, Merce Crosas, Rosanne Di Stefano, et al. 2014. “Ten Simple Rules for the Care and Feeding of Scientific Data.” PLOS Computational Biology 10 (4): e1003542. https://doi.org/10.1371/journal.pcbi.1003542. Hart, Edmund M., Pauline Barmby, David LeBauer, François Michonneau, Sarah Mount, Patrick Mulrooney, Timothée Poisot, Kara H. Woo, Naupaka B. Zimmerman, and Jeffrey W. Hollister. 2016. “Ten Simple Rules for Digital Data Storage.” PLOS Computational Biology 12 (10): e1005097. https://doi.org/10.1371/journal.pcbi.1005097. Wilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (March): 160018. https://doi.org/10.1038/sdata.2016.18. Also see the resources available at DataONE. "],
["3-1-metadata.html", "3.1 Metadata", " 3.1 Metadata Metadata is data about your data. It includes information about your data’s content, structure, authors, and permissions to make your data interpretable and usable by your future self and others. EVERY data file should be accompanied by a metadata file. 3.1.1 Metadata Standards We use “readme” style metadata, named \"_readme_datafilename\", and stored in the same folder as the data file. Create one readme file for each data file. Use this template to create your readme file. **Name the readme _readme_datafilename** and save as a text file or Google Doc Format the readme document so it is easy to understand (use bullets, break up information, etc.) Use a standardized date format YYYY-MM-DD 3.1.2 Where to store metadata All readme metadata files are stored in the folder that contains the data file in the emLab Data Directory. "],
["3-2-data-directory.html", "3.2 Data Directory", " 3.2 Data Directory All emLab data is stored in subfolders of the Data folder on the emLab Team Drive. To document these data, we use the emLab Data Directory that includes key, standardized information from each readme metadata file. Every data file in the Data folder has a record (row) in the emLab Data Directory. The emLab Data Directory file contains two sheets: (1) Data directory (the record and standardized documentation for each data file); (2) Metadata (information needed to populate the Data Directory, i.e. the meta-metadata) Column Description Domain Climate/Energy; Land; Ocean; Other [drop down menu] Description A few word description (e.g. SST US 2017); max 5 words Folder Name of folder containing data Filename Name of data Year Year of publication Version Sub category of year; NA if not applicable Project Project name that used these data (can have multiple listings) or ‘General’ if widely used (e.g. FAO data), hyperlinked to Google Drive/Box folder Code Link to Github repo or wherever code is stored Raw/Output raw’ if raw data; ‘output’ for what was used for the project and/or published [drop down menu] Filetype File extension (e.g. csv; tif; rds); note: do note include ‘.’ Citation Hyperlinked reference to publication or online resource or contact for individual/group data author URL Link to original data source Extent global; regional; national; local [drop down menu] Resolution Resolution of spatial data (in degrees) Permissions open = open source/open access; restricted = need author permission; secure = confidential data and likely involves an NDA [drop down menu] Start year Data set start year; numeric End year Data set end year; numeric Source e.g. emLab; FAO; Rare Contact Name and email of contact person in emLab who used/stored data emLab reference Hyperlinked reference to emLab publication using data (can be NA) Keywords e.g. fisheries; fire; utilities; property value; VDS; MPA; oceanography; temperature; habitat; biodiversity (up to 5 per entry, separated by semi-colons) Summary Brief description of the data (1-2 sentences). Include years for timeseries; location/spatial extent for spatial data; key variables; resolution; sampling frequency; species; etc. Notes Other relevant information about data. Initial your entry (e.g. if it was processed (e.g. subset from a larger dataset); what specifically was done; are there suspicious data points?; note if there are issues; etc.) "],
["3-3-tidy-data.html", "3.3 Tidy Data", " 3.3 Tidy Data As researchers, we work with data from many different sources. Often these data are messy. One of the first steps of any analysis is to clean any available raw data so that you can make simple visualizations of the data, calculate simple summary statistics, look for missing or incorrect data, and eventually proceed with more involved analyses or modeling. As part of the data cleaning process, we recommend getting all data into a “tidy” format (also known as “long” format, as opposed to “wide” format). According to the Tidy Data Guide by Garrett Grolemund and Hadley Wickham, tidy data is defined as: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. These three features of tidy data can be seen in the following figure, also from the Tidy Data Guide: Once data are in this format, it makes subsequent visualization and analysis much easier. If you’ve ever worked with a file that has a separate column for each year (an example of “wide” format data), you know how hard that type of data format is to work with! As always, we recommend keeping a backup copy of the raw data you obtained from the original source, and using a reproducible script for transforming these data into a tidy data format. 3.3.1 Recommended Resources We highly recommend the chapter on Tidy Data from the book R for Data Science by Garrett Grolemund and Hadley Wickham. This guide is geared towards R users and provides helpful tips for transforming and working with data in R, but the concepts should be broadly applicable to other languages as well. For tips specific to Python, we recommend a blogpost by Jean-Nicholas Hould titled Tidy Data in Python. "],
["4-code.html", "4 Code", " 4 Code All data processing and analysis should be performed with code (i.e., avoid spreadsheets), and all code should be packaged in scripts that are version controlled and follow a style guide. Using code and scripts allows for better organization, documentation, and reproducibility of analysis workflows. Recommended readings: Bryan, Jennifer. 2018. “Excuse Me, Do You Have a Moment to Talk About Version Control?” The American Statistician 72 (1): 20–27. https://doi.org/10.1080/00031305.2017.1399928. Stodden, Victoria, and Sheila Miguez. 2014. “Best Practices for Computational Science: Software Infrastructure and Environments for Reproducible and Extensible Research.” Journal of Open Research Software 2 (1): e21. https://doi.org/10.5334/jors.ay. Wilson, Greg, D. A. Aruliah, C. Titus Brown, Neil P. Chue Hong, Matt Davis, Richard T. Guy, Steven H. D. Haddock, et al. 2014. “Best Practices for Scientific Computing.” PLOS Biology 12 (1): e1001745. https://doi.org/10.1371/journal.pbio.1001745. Wilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K. Teal. 2017. “Good Enough Practices in Scientific Computing.” PLOS Computational Biology 13 (6): e1005510. https://doi.org/10.1371/journal.pcbi.1005510. "],
["4-1-scripts-and-version-control.html", "4.1 Scripts and Version Control", " 4.1 Scripts and Version Control Code should be crafted according to the following guidelines: Use scripts Document scripts, but not too much Organize scripts consistently (see format below) Use Git to version control scripts Make atomic Git commits (see description below) Script files should be documented and organized in such a way to enhance readability and comprehension. For example, use a standardized header for general documentation and sections to make it easier to understand and find specific code of interest. Code should also be self-documenting as much as possible. Additionally, use relative filepaths for importing and exporting objects. Scripts should also be modular by focusing on one general task. For example, use one script for cleaning data, another script for visualizing data, etc. A makefile can then be used to document the analysis workflow. There is an art to this organization, so just keep in mind the general principle of making code easy to understand, for your future self and for others. Here is an example template for R scripts: # ============================================================================= # Name: script.R # Description: Visualizes data # # Inputs: data.csv # Outputs: graph.png # # Notes: - Use a diverging color palette for best results # - Output format can be changed as needed # ============================================================================= # Set up environment ---------------------------------------------------------- library(tidyverse) # Set path for Google Drive filestream based on OS type team_path &lt;- case_when(Sys.info()[&quot;sysname&quot;]==&quot;Windows&quot; ~ &quot;G:/&quot;, Sys.info()[&quot;sysname&quot;]==&quot;Darwin&quot; ~ &quot;/Volumes/GoogleDrive/&quot;) # Import data ----------------------------------------------------------------- # Process data ---------------------------------------------------------------- # Analyze data ---------------------------------------------------------------- # Visualize results ----------------------------------------------------------- # Save results ---------------------------------------------------------------- Git tracks changes in code line-by-line with the use of commits. Commits should be atomic by documenting single, specific changes in code as opposed to multiple, unrelated changes. Atomic commits can be small or large depending on the change being made, and they enable easier code review and reversion. Git commit messages should be informative and follow a certain style, such as the guide found here. There is also an art to the version control process, so just keep in mind the general principle of making atomic commits. emLab uses GitHub to host Git repos in the cloud, which makes collaborative code development easier and also provides related project management tools. Repos can be public or private, depending on the nature of the project. Furthermore, workflows for Git and GitHub, such as using pull requests or branches, will vary from project to project. It is important that the members of each project agree to and follow a specific workflow to ensure that collaboration is effective and efficient. "],
["4-2-style-guide.html", "4.2 Style Guide", " 4.2 Style Guide At emLab, we recommend using a consistent code style for each of the different programming languages we use. Recommended coding styles for a particular language are collated in what is known as a “style guide”. Style guides typically include standardized ways of naming script files, defining functions and variables, commenting code, etc. While emLab does not mandate the use of style guides, having a consistent code style allows all emLab staff to easily understand each other’s code, collaborate on projects, and jump in on new projects. We consider this an important aspect of collaboration, reproducibility, and transparency. Rather than re-invent the wheel, we leverage existing code style guidelines for each of the languages we use. Below is a summary of the code style guidelines we recommend for various languages: R - Tidyverse Style Guide, by Hadley Wickham Python - Google’s Python Style Guide Stata - Suggestions on Stata programming style, by Nicolas J. Cox Other languages - Google style guides for other languages "],
["5-high-performance-computing.html", "5 High Performance Computing", " 5 High Performance Computing Certain analysis use cases require high performance computing resources: big data parallel computing lengthy computation times restricted-use data For analyses involving big data or models that take a long time to estimate, a single laptop or desktop computer is often not powerful enough or becomes inconvenient to use. Additionally, for analyses involving restricted-use data, such as datasets containing personally identifiable information, data use agreements typically stipulate that the data should be stored and analyzed in a secure manner. In these cases, you should use the high performance computing resources available to emLab, including cloud computing through Google Cloud Platform and the UCSB server clusters. Cloud computing incurs costs but is flexible whereas the UCSB server clusters are free but have some limitations, such as job queues. When to use Google Cloud Platform: need maximum computational flexibility When to use UCSB server clusters: costs are a concern using Stata using restricted-use data (depends on data use agreement) "],
["5-1-google-cloud-platform.html", "5.1 Google Cloud Platform", " 5.1 Google Cloud Platform Google Cloud Platform (GCP) is a suite of cloud-based products that work together to provide robust and seamless solutions to high performance computing, big data storage, data analytics, machine learning and more. The platform is built on Google’s internal infrastructure and it’s known for it’s reliability, flexibility, speed, and a relatively low cost “pay-as-you” model. At EmLab we mainly use three of GCP’s products: Cloud Storage, BigQuery, and Compute Engine and each year we have a limited amount of credits to cover the costs of using these tools for projects that require the storage and use of very large datasets, projects that require large computational power, or those that use Global Fishing Watch data. When it comes to high performance computing, Compute Engine is a very useful tool. It allows us to easily create custom-made virtual machines with the storage, memory, and number of cores needed for a given task. Virtual machines can run public images of Linux, Windows Server, and can also be used to deploy Docker containers. Starting, stopping, and deleting virtual machines is easy and fast which means we have full control on the amount of resources we use and get billed for. To get up and running with a virtual machine, Grant McDermott (SFG alumn and fellow) wrote this really good step by step tutorial. Here you will learn how to create, start, connect to, and stop a virtual machine in Compute Engine and how to install Rstudio server and git. Importantly, you will also find a link that walks you through the installation of Google Cloud SDK command line utility (gcloud) which is a prerequisite to be able to speak to your virtual machine from your local terminal. When you install gcloud and autenthicate your credentials you will be able to set ucsb-gfw as your project which will link you to Emlab’s billing account. If you have not joined ucsb-gfw please get in touch with and we will set you up! General guidelines for creating and running virtual machines: Give your VM a descriptive name associated with the specific project you will be using it for. Give your VM a static IP address. That way you can add it to your bookmarks and access it easily. Always turn off your VM when not it use. Remember we get charged for every minute it is on. Delete the VM once the project is finished. That way we keep things tidy. "],
["5-2-ucsb-server-clusters.html", "5.2 UCSB Server Clusters", " 5.2 UCSB Server Clusters The Center for Scientific Computing at UCSB provides resources and support for research involving high performance computing, including multiple server clusters for storing and analyzing data. Find out more information at http://csc.cnsi.ucsb.edu/. The clusters should be used if cloud computing costs are a concern. The cluster computing resources are free to emLab researchers, but they are a shared resource among UCSB researchers and involve job queues that can potentially delay analyses. However, most of the analyses typical of emLab projects require a small amount of resources relative to other users of the clusters. Additionally, the clusters should typically be used if using restricted-use data in research, though this depends on the terms of the data use agreement. Be sure to restrict access to any sensitive data on the clusters by changing the folder and file permissions appropriately. Some data providers may prefer to use cloud computing services for sensitive data because it may give them greater control over the uses of their data. If needed, these issues about where data can be stored and analyzed should be negotiated and resolved in data use agreements. A user guide for the clusters can be found at https://emlab-ucsb.github.io/cluster-guide/. "]
]
